<% if !IssueStatus.exists?(name: 'Backlog')
	IssueStatus.create(name: 'Backlog')
end %>

<% if(Setting.respond_to? :plugin_redmine_project_issue_statuses) %>
<!-- KANBAN VIEW -->
<%# early javascript before common.hs %>
<%- controller.rb_jquery_plugins = capture do %>
  <%= javascript_include_tag(
          'jquery/jquery.multiselect.js', 'jquery/jquery.qtip.pack.js', 'jquery/jquery.qtip.setup.js',
          :plugin => 'redmine_backlogs')
  %>
<%- end %>
<% content_for :head_tags do %>
  <%= javascript_include_tag(
          'show_main_kanban', 'board_updater', 'kanban_updater', 'kanban', 'model', 'issue', 'task', 'impediment',
          :plugin => 'redmine_backlogs')
  %>
    <%= stylesheet_link_tag 'jquery/jquery.qtip.css', :plugin => 'redmine_backlogs' %>
    <%= stylesheet_link_tag 'jquery/jquery.multiselect.css', :plugin => 'redmine_backlogs' %>
  <%= stylesheet_link_tag 'kanban.css', :plugin => 'redmine_backlogs', :media => 'print,screen' %>
    <%= stylesheet_link_tag 'taskboard_print.css', :plugin => 'redmine_backlogs', :media => 'print' %>

    <script type="text/javascript"
            src="<%= url_for(:controller => 'rb_server_variables',
                             :action => 'sprint', :sprint_id => @sprint.id,
                             :context => 'kanban',
                             :format => 'js') %>">
    </script>

  <%# Usability: display default cursor if tasks cannot be dragged %>
  <% unless User.current.allowed_to?(:update_tasks, @project) && @sprint.open? %>
    <style type="text/css">
    #kanban .issue{cursor:default;}
    </style>
  <% end %>
<% end %>

  <% content_for :breadcrumbs do %>
    <% unless Backlogs.setting[:show_redmine_std_header] %>
      <%= link_to l(:label_master_backlog), :controller => "rb_master_backlogs", :action => "show", :project_id => @project %>
      <%= breadcrumb_separator %>
    <% end %>
    <%= h @sprint.name %>
  <% end %>

  <%- content_for :view_specific_users do %>
    <span id="userselect">
    <ul style="list-style:none; margin:0px">
    <li><label>
    <select class="userfilter" size="5" name="filter-user-selection" multiple="multiple" title="User selection">
    <option value='s'>Show empty Stories</option>
    <option value='c'>Show closed Stories</option>
    <optgroup label="Users">
    <% @project.assignable_users.sort.each do |member| %>
      <option value="<%= member.id %>"> <%= member.name %></option>
    <% end %>
    </optgroup>
    </select>
    </label></li>
    </ul>
    <br style="clear:both" />
    </span>
  <%- end %>

  <%- content_for :view_specific_links do %>

    <span id="sprintestimatedhours">(<%= @sprint.estimated_hours.to_f %> estimated <%= l(:label_hours) %>)</span>
    <% if @sprint.has_burndown? %>
      <a id='show_charts'><%= l(:label_burndown) %></a>
    <% end %>
    <span id="col_width"><%= l(:label_column_width) %>: <input name="col_width"/></span>
    <a id="disable_autorefresh">Disable Auto-refresh</a>
    <a id="refresh">Refresh</a>
  <%- end %>

<%- content_for :main do %>
<span id="userid" style="visibility:hidden;"><%= User.current.id %></span>

<table style = "width:100%; table-layout:fixed;">
<tr  class="header expand" id="kanbanHeader">
</tr>
</table>

<div id="kanban" style = "overflow-x:scroll;">

  <table id="board_header" cellspacing="0">

    <tr class="kanbanlane">
      <td class="swimlane"><%= l(:backlogs_backlog) %></td>
      <%-
        i = 0
        (@statuses.sort_by do |status|
          i += 1
          order = i
          if status.is_a?(ProjectIssueStatus)
            if(status.order != 0)
              order = status.order
            end
            status.order = order
            status.save
          end
          order
        end).each do |status| %>
	  <% if(Setting.respond_to? :plugin_redmine_project_issue_statuses) %>
	  <% if Setting.plugin_redmine_project_issue_statuses == nil || Setting.plugin_redmine_project_issue_statuses == ""
		  Setting.plugin_redmine_project_issue_statuses = {'issueStatusToKanban' => {}}
		end 
		if Setting.plugin_redmine_project_issue_statuses['issueStatusToKanban'] == nil || Setting.plugin_redmine_project_issue_statuses['issueStatusToKanban'] == ""
		  Setting.plugin_redmine_project_issue_statuses['issueStatusToKanban'] = {}
		end
	 if Setting.plugin_redmine_project_issue_statuses['issueStatusToKanban'] == nil || Setting.plugin_redmine_project_issue_statuses['issueStatusToKanban'] == ""
		 Setting.plugin_redmine_project_issue_statuses['issueStatusToKanban'] = {}
	 end
			 if (status.name == "Backlog" || status.is_a?(ProjectIssueStatus) || Setting.plugin_redmine_project_issue_statuses['issueStatusToKanban'].has_key?(status.id))
				 if(status.name != "Backlog" &&
						 (
             status.is_a?(ProjectIssueStatus) && status.visible_in?(@project) && status.is_kanban? ||
             Setting.plugin_redmine_project_issue_statuses['issueStatusToKanban'].has_key?(status.id) && Setting.plugin_redmine_project_issue_statuses['issueStatusToKanban'][status.id].respond_to?('include?') && Setting.plugin_redmine_project_issue_statuses['issueStatusToKanban'][status.id].include?(@project.id)
             ))
		%>
				<td class="swimlane swimhead <%= status.id %>" id="<%= status.id %>"><%= h status.name %> <%= link_to(
                                                                                                         "",
                                                                                                         {},#{:action => 'edit', :id => status.id},
                                                                                                         :class => 'icon icon-edit'
                                                                                                     ) if status.is_a?(ProjectIssueStatus) && User.current.allowed_to?(:configure_project_issue_statuses, nil, :global=>true)%> <%= link_to("",
                                                                                                                                                                                                                                            {},#{:action => 'delete', :id => status.id},
                                                                                                                                                                                                                                            :class => 'icon icon-del',
                                                                                                                                                                                                                                            data: { confirm: "Are you sure you want to delete #{status.name}?" }
                                                                                                                                                                                                                                            ) if status.is_a?(ProjectIssueStatus) && User.current.allowed_to?(:configure_project_issue_statuses, nil, :global=>true)%></td>
		<%	end
		%>
		<% end
		%>
	  
	  <% else %>
    <td class="swimlane swimhead <%= status.id %>"><%= h status.name %></td>
	  <% end %>
      <%- end %>
    </tr>
	
	
  </table>

  <table id="impediments" class="board" cellspacing="0">
    <tr>
      
    </tr>
  </table>

  <table id="tasks" class="board" cellspacing="0">
    <% issues = Issue.where(project_id: @project.id) %>
    <tr id="swimlane-kanban" class="story-swimlane">
	  
	  <% if(Setting.respond_to? :plugin_redmine_project_issue_statuses) %>
		<% status = IssueStatus.find_by name: 'Backlog' %>
		      <td class="swimlane list <%= status.is_closed? ? 'closed' : '' %>" id="-1_<%= status.id %>_<%= @sprint.id %>" -rb-status-id="<%= status.id %>" -rb-project-id="<%= @project.id %>">
				<div class="label_kanban_new">
						<div id="left" style="width: 87.5%;display:table-cell;height: 100%; border-right:1px dotted #CFCFCF;margin:5px;padding:5px;">
						<!-- New -->
						</div>
						<div id="right" style="width: 12.5%; display:table-cell;height: 100%; text-align:center; margin-left: auto;margin-right: auto; vertical-align: middle;">
						<% if User.current.allowed_to?(:create_tasks, @project) && @sprint.open? %>
								<span class="add_new">
								<%= image_tag("plusSignIcon.svg", :alt => "+", :style => "width:100%;height:100%;", :plugin => 'redmine_backlogs') %>
								Add Task
								</span>
						<% end %>
						</div>
						<br style="clear:both;"/>
				</div>
				<%= render_rb_task_collection(issues.select{|task| !task.parent_id && task.status_id==status.id}) %>
              </td>
	  <% end %>
      <%- i = 0
          (@statuses.sort_by do |status|
            i += 1
            order = i
            if status.is_a?(ProjectIssueStatus)
              if(status.order != 0)
                order = status.order
              end
              status.order = order
              status.save
            end
            order
          end).each do |status| %>
        <% if(Setting.respond_to? :plugin_redmine_project_issue_statuses) %>
          <% if Setting.plugin_redmine_project_issue_statuses == nil || Setting.plugin_redmine_project_issue_statuses == ""
            Setting.plugin_redmine_project_issue_statuses = {'issueStatusToKanban' => {}}
          end 
          if Setting.plugin_redmine_project_issue_statuses['issueStatusToKanban'] == nil || Setting.plugin_redmine_project_issue_statuses['issueStatusToKanban'] == ""
            Setting.plugin_redmine_project_issue_statuses['issueStatusToKanban'] = {}
          end
				 if Setting.plugin_redmine_project_issue_statuses['issueStatusToKanban'] == nil || Setting.plugin_redmine_project_issue_statuses['issueStatusToKanban'] == ""
					 Setting.plugin_redmine_project_issue_statuses['issueStatusToKanban'] = {}
				 end
						 if (status.name == "Backlog" || status.is_a?(ProjectIssueStatus) || Setting.plugin_redmine_project_issue_statuses['issueStatusToKanban'].has_key?(status.id))
               if(status.name != "Backlog" &&
                   (
                   status.is_a?(ProjectIssueStatus) && status.visible_in?(@project) && status.is_kanban? ||
                       Setting.plugin_redmine_project_issue_statuses['issueStatusToKanban'].has_key?(status.id) && Setting.plugin_redmine_project_issue_statuses['issueStatusToKanban'][status.id].respond_to?('include?') && Setting.plugin_redmine_project_issue_statuses['issueStatusToKanban'][status.id].include?(@project.id)
                   ))
          %>
              <td class="swimlane list <%= status.is_closed? ? 'closed' : '' %>" id="-1_<%= status.id %>_<%= @sprint.id %>" -rb-status-id="<%= status.id %>" -rb-project-id="<%= @project.id %>">
                <%= render_rb_task_collection(issues.select{|task| !task.parent_id && task.status_id==status.id}) %>
              </td>
            <%end
            %>
          <% end
          %>
        <% else %>
          <td class="swimlane list <%= status.is_closed? ? 'closed' : '' %>" id="-1_<%= status.id %>_<%= @sprint.id %>" -rb-status-id="<%= status.id %>" -rb-project-id="<%= @project.id %>">
              <%= render_rb_task_collection(issues.select{|task| !task.parent_id && task.status_id==status.id}) %>
          </td>
        <% end %>
      <% end %>
    </tr>
    
  </table>
</div>
<%- end %>

<%- content_for :helpers do %>
  <select class="time_entry_user_id template" id="time_entry_user_id_options">
    <%- users_allowed_to_log_on_task.each do |u| %>
      <option value="<%= u[1] %>"><%= u[0] %></option>
    <%- end %>
  </select>

  <select class="priority_id template" id="priority_id_options">
    <%- IssuePriority.all.each do |p| %>
    <option value="<%= p.id %>"><%= h p.name %></option>
    <%- end %>
  </select>

  <select class="assigned_to_id template" id="assigned_to_id_options">
    <option value="" color="#AAAAAA" color_light="#E0E0E0"> </option>
    <%= users_assignable_options_for_select(@project.assignable_users) %>
  </select>
  <div id="task_template">
    <%= render :partial => "rb_tasks/task", :object => RbTask.new %>
  </div>
  
  <!-- end of templates -->
  <div id="issue_editor"> </div>
  <div class="meta" id="last_updated"><%= date_string_with_milliseconds( (@last_updated.blank? ? Time.now : @last_updated.updated_on) )  %></div>
  <div id="charts"> </div>
  <div id="preloader">
    <div id="spinner"> </div>
    <div id="warning"> </div>
  </div>
<%- end %>
<% end %>